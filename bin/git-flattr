#!/usr/bin/env ruby

require 'flattr'

options = {
  :git_dir => "#{Dir.pwd}/.git",
  :git_config => "#{Dir.pwd}/.git/config"
}

def error message
  puts "Error: #{message}"
end

class Git
  class <<self
    def command cmd, opts = []
      opts = [opts].flatten.map {|s| escape(s) }.join(' ')
      git_cmd = "git #{cmd} #{opts} 2>&1"
      `#{git_cmd}`.chomp
    end

    def escape(s)
      escaped = s.to_s.gsub('\'', '\'\\\'\'')
      %Q{"#{escaped}"}
    end

    def config name
      command('config', ['--get', name])
    end

    def set_config name, value
      command('config', ['--global', '--add', name, value])
    end

    def github_repository?
      origin = config 'remote.origin.url'
      !origin.match(%r{^(https://[a-z0-9\-_]+@github\.com|git@github\.com:|https://github\.com/)}).nil?
    end

    def github_url
      origin = config 'remote.origin.url'
      if @github_url.nil?
        if origin.match %r{^https://[a-z0-9\-_]+@github\.com}
          match = origin.match(%r{^https://[a-z0-9\-_]+@github\.com/([a-z0-9\-_]+)/([a-z0-9\-_]+)\.git$})
        elsif origin.match %r{^git@github.com:}
          match = origin.match(%r{^git@github\.com:([a-z0-9\-_]+)/([a-z0-9\-_]+)\.git$})
        elsif origin.match %r{^https://github\.com/}
          match = origin.match(%r{^https://github\.com/([a-z0-9\-_]+)/([a-z0-9\-_]+)\.git$})
        end
        if match.nil?
          error "Parsing GitHub origin."
          exit 1
        else
          @github_url = "https://github.com/#{match[1]}/#{match[2]}"
        end
      end
      return @github_url
    end
  end
end

begin

  unless File.exists?(options[:git_dir])
    error "Don't seem to be a git repository"
    exit 1
  end

  unless File.exists?(options[:git_config])
    error "Git .config file not found"
    exit 1
  end

  unless Git.github_repository?
    error "Not a GitHub repository"
    exit 1
  end

  if Git.config('flattr.token') == ""
    puts "Seems like you are missing a Flattr access token."
    puts "Browse to http://git-flattr.herokuapps.com and follow the instructions"
    print "Token: "
    token = gets
    Git.set_config "flattr.token", token.chomp
  end

  Flattr.configure do |config|
    config.access_token = Git.config 'flattr.token'
    config.endpoint = 'https://api.flattr.dev'
  end

  flattr = Flattr.new
  flattr.flattr Git.github_url
  thing = flattr.thing_lookup Git.github_url
  puts "Flattred #{Git.github_url} (#{thing.link})!"
  exit 0

rescue Flattr::Error::Unauthorized
  error "You are unauthorized to access the resource on Flattr."
  exit 1
rescue Flattr::Error::Forbidden => e
  error e.message
  exit 1
end
